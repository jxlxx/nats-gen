{{ define "Testing"}}
package {{ .Package }}

import (
	"testing"
	"context"

	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/micro"
	"github.com/testcontainers/testcontainers-go"
	tc "github.com/testcontainers/testcontainers-go/modules/nats"
	{{ range .Imports }}{{ .CustomName }}"{{ .URL }}"{{ end }}
)

type MockHandler struct{}

{{ range .Endpoints }}
func (m MockHandler) {{ .OperationID }}(r micro.Request{{range .Handler.Parameters }}, {{ .Name }} {{.DataType}} {{ end }}{{if .Payload.Deserialize}}, {{.Payload.Name}} {{ .Payload.Type}} {{ end}} ){}{{ end }}

func Test{{ .TestName }}(t *testing.T) {
	ctx := context.Background()

	natsContainer, err := tc.RunContainer(ctx,
		testcontainers.WithImage("nats:2"),
	)
	if err != nil {
		t.Fatalf(err.Error())
	}

	// Clean up the container
	defer func() {
		if err := natsContainer.Terminate(ctx); err != nil {
			t.Fatalf(err.Error())
		}
	}()

	connectionURL, err := natsContainer.ConnectionString(ctx)
	if err != nil {
		t.Fatalf(err.Error())
	}

	nc, err := nats.Connect(connectionURL)
	if err != nil {
		t.Fatalf(err.Error())
	}

	h := MockHandler{}
	if _, err := CreateService(nc, h, &Options{ {{ range $k, $v := .TestOptions}}
	{{ $k }}: "{{ $v }}",{{ end }}
	}); err != nil {
		t.Fatalf("err creating service: %s\n", err)
	}
}
{{ end }}
